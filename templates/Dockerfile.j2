# Docker - Pull base image
FROM {{ image | required('image') }}:{{ image_tag | required('image_tag') }}

# Environment - Setup ARGs and ENV, after FROM reset all args.
ARG DEBIAN_FRONTEND=noninteractive
ARG USER_NAME
ARG USER_PASSWORD
ARG USER_UID
ARG USER_GID
ENV UID=$USER_UID
ENV GID=$USER_GID
ENV USER=$USER_NAME
ENV SHELL=/bin/bash
ENV TZ=Europe/Berlin
ENV TERM=xterm-256color
ENV PATH=$PATH:/home/$USER/.local/bin

# Environment - Setup internationalization and styles.
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

{%- if pre_package_install %}
{{ pre_package_install }}
{%- endif %}

# Packages - Update and Install
RUN apt-get update && apt-get install -y \
    curl \
    git \
    lsb-release \
    sudo \
    tree \
    vim \
    wget \
    {%- for pkg in additional_apt_packages %}
        {{ pkg }}{% if not loop.last %} \{% endif %}
    {%- endfor %} \
    && rm -rf /var/lib/apt/lists/*

{%- if post_package_install %}
{{ post_package_install }}
{%- endif %}

# Remove existing ubuntu user if it exists and conflicts
RUN if id "ubuntu" &>/dev/null; then \
        if [ "$(id -u ubuntu)" = "${UID}" ] || [ "$(id -g ubuntu)" = "${GID}" ]; then \
            userdel -r ubuntu 2>/dev/null || true; \
            groupdel ubuntu 2>/dev/null || true; \
        fi; \
    fi

# Remove existing group with target GID if it exists
RUN if getent group "${GID}" &>/dev/null; then \
        groupdel "$(getent group "${GID}" | cut -d: -f1)" 2>/dev/null || true; \
    fi

# Create user from Variables.
RUN echo "Creating user ${USER} with UID ${UID} and GID ${GID}..."
RUN groupadd --gid "${GID}" "${USER}" && \
    useradd --uid "${UID}" --gid "${GID}" -m --shell $(which bash) "${USER}" -G sudo && \
    echo "${USER}:${USER_PASSWORD}" | chpasswd && \
    echo "%sudo ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/sudogrp && \
    chmod 0440 /etc/sudoers.d/sudogrp && \
    chown ${UID}:${GID} -R /home/${USER}

{%- if additional_sudo_commands %}
{{ additional_sudo_commands }}
{%- endif %}

USER $USER
WORKDIR /home/$USER

# Create workspace directory with correct ownership
RUN mkdir -p /home/$USER/workspace

{%- if additional_user_commands %}
{{ additional_user_commands }}
{%- endif %}

# Set up entrypoint
ENTRYPOINT ["/bin/bash", "-c", "exec bash"]